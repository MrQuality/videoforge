//! Test utilities shared across integration tests.

use std::{fs, io, path::PathBuf};

use tempfile::TempDir;

/// Raw bytes for a 1x1 RGBA PNG used when exercising the decode stage.
const SAMPLE_PNG: &[u8] = &[
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x04, 0x00, 0x00, 0x00, 0xb5, 0x1c, 0x0c,
    0x02, 0x00, 0x00, 0x00, 0x0b, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0x63, 0xfc, 0x1f, 0x04, 0x00,
    0x09, 0xfb, 0x03, 0xfd, 0x0f, 0x84, 0x25, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
    0xae, 0x42, 0x60, 0x82,
];

/// Materializes the sample PNG in a temporary directory and returns its location.
///
/// Keeping the [`TempDir`] alive ensures the file remains available for the
/// duration of each test.
pub fn write_sample_png() -> io::Result<(TempDir, PathBuf)> {
    let dir = TempDir::new()?;
    let path = dir.path().join("frame.png");
    // Persist the deterministic sample image to disk for FFmpeg to consume.
    fs::write(&path, SAMPLE_PNG)?;
    Ok((dir, path))
}
